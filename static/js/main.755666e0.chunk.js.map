{"version":3,"sources":["components/CharacterCard/index.js","components/Header/index.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","className","src","image","id","alt","width","height","onClick","clickCounter","Header","children","score","topscore","Wrapper","App","state","characters","i","length","console","log","count","setState","this","shuffleCharacters","endGame","shuffle","a","j","x","Math","floor","random","forEach","element","alert","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"msDAYeA,MATf,SAAuBC,GACnB,OACI,yBAAKC,UAAU,aACX,yBAAKC,IAAKF,EAAMG,MAAOC,GAAG,QAAQH,UAAU,gBAAgBI,IAAI,eAAeC,MAAM,MAAMC,OAAO,MAClGC,QAAS,kBAAMR,EAAMS,aAAaT,EAAMI,SCMrCM,MAXf,SAAgBV,GACZ,OACI,yBAAKC,UAAU,yBACX,yBAAKA,UAAU,iBACX,uBAAGA,UAAU,gBAAgBD,EAAMW,WAEvC,uBAAGV,UAAU,eAAb,UAAmCD,EAAMY,MAAzC,eAA4DZ,EAAMa,Y,OCF/DC,MAJf,SAAiBd,GACb,OAAO,yBAAKC,UAAU,WAAWD,EAAMW,WCmF5BI,E,2MA/EbC,MAAQ,CACNC,aACAL,MAAO,EACPC,SAAU,G,EAmBZJ,aAAe,SAAAL,GAEb,IAAK,IAAIc,EAAI,EAAGA,EAAG,EAAKF,MAAMC,WAAWE,OAAQD,IAE/C,GADAE,QAAQC,IAAIjB,EAAK,MAAQ,EAAKY,MAAMC,WAAWC,GAAGd,IAC9C,EAAKY,MAAMC,WAAWC,GAAGd,KAAOA,EAAI,CAEtC,GAA4B,IAAxBa,EAAWC,GAAGI,MAMhB,OALAL,EAAWC,GAAGI,MAAQL,EAAWC,GAAGI,MAAQ,EAC5C,EAAKC,SAAS,CAACX,MAAO,EAAKI,MAAMJ,MAAQ,IAAI,WAC3CQ,QAAQC,IAAIG,KAAKR,MAAMJ,UAEzB,EAAKa,qBACE,EAEP,EAAKC,Y,EAabC,QAAU,SAAAC,GAER,IADA,IAAIC,EAAGC,EACEZ,EAAIU,EAAET,OAAS,EAAGD,EAAI,EAAGA,IAChCW,EAAIE,KAAKC,MAAMD,KAAKE,UAAYf,EAAI,IACpCY,EAAIF,EAAEV,GACNU,EAAEV,GAAKU,EAAEC,GACTD,EAAEC,GAAKC,EAET,OAAOF,G,yEAtCP,OAXIJ,KAAKR,MAAMJ,MAAQY,KAAKR,MAAMH,UAChCW,KAAKD,SAAS,CAAEV,SAAUW,KAAKR,MAAMJ,QAGvCY,KAAKR,MAAMC,WAAWiB,SAAQ,SAAAC,GAC5BA,EAAQb,MAAQ,KAElBc,MAAM,wBAAD,OAAyBZ,KAAKR,MAAMJ,QACzCY,KAAKD,SAAS,CAACX,MAAO,IACtBY,KAAKC,oBACLL,QAAQC,IAAIG,KAAKR,MAAMJ,QAChB,I,0CA0BPY,KAAKD,SAAS,CAACN,WAAYO,KAAKG,QAAQH,KAAKR,MAAMC,cACnDG,QAAQC,IAAIG,KAAKR,MAAMC,c,+BAcf,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQL,MAAOY,KAAKR,MAAMJ,MAAOC,SAAUW,KAAKR,MAAMH,UAAtD,eACCW,KAAKR,MAAMC,WAAWoB,KAAI,SAAAF,GAAO,OAChC,kBAAC,EAAD,CACEG,IAAKH,EAAQ/B,GACbA,GAAI+B,EAAQ/B,GACZD,MAAOgC,EAAQhC,MACfM,aAAc,EAAKA,uB,GAtEb8B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.755666e0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nfunction CharacterCard(props) {\r\n    return (\r\n        <div className=\"container\">\r\n            <img src={props.image} id=\"image\" className=\"img-thumbnail\" alt=\"PokemonImage\" width=\"200\" height=\"200\"\r\n            onClick={() => props.clickCounter(props.id)}/> \r\n        </div>\r\n    );\r\n};\r\n        \r\nexport default CharacterCard;","import React from \"react\";\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-inverse\">\r\n            <div className=\"navbar-header\">\r\n                <p className=\"navbar-brand\">{props.children}</p>\r\n            </div>\r\n            <p className=\"navbar-text\">Score: {props.score} Top Score: {props.topscore}</p>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper\">{props.children}</div>\r\n}\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\nimport Character from \"./components/CharacterCard/index\";\nimport Header from \"./components/Header/index\";\nimport characters from \"./characters.json\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\n\nclass App extends Component {\n  state = {\n    characters,\n    score: 0,\n    topscore: 0\n  };\n\n  endGame() {\n    //set new top score \n    if (this.state.score > this.state.topscore) {\n      this.setState({ topscore: this.state.score });\n    }\n    \n    this.state.characters.forEach(element => {\n      element.count = 0;\n    });\n    alert(`Wrong guess \\nScore: ${this.state.score}`);\n    this.setState({score: 0});\n    this.shuffleCharacters();\n    console.log(this.state.score);\n    return true;\n  };\n\n  clickCounter = id => {\n    \n    for (var i = 0; i< this.state.characters.length; i ++) {\n      console.log(id + \"and\" + this.state.characters[i].id);\n      if (this.state.characters[i].id === id) {\n        \n        if (characters[i].count === 0) {\n          characters[i].count = characters[i].count + 1;\n          this.setState({score: this.state.score + 1}, function() {\n            console.log(this.state.score);\n          });\n          this.shuffleCharacters();\n          return true;\n        } else{\n          this.endGame();\n        }\n      }\n      \n    }\n      \n  };\n\n  shuffleCharacters() {\n    this.setState({characters: this.shuffle(this.state.characters)});\n    console.log(this.state.characters);\n  };\n\n  shuffle = a => {\n    var j, x;\n    for (var i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n    }\n    return a;\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Header score={this.state.score} topscore={this.state.topscore}>CLICKY GAME</Header>\n        {this.state.characters.map(element =>\n          <Character\n            key={element.id}\n            id={element.id}\n            image={element.image}\n            clickCounter={this.clickCounter} />\n        )}\n\n      </Wrapper>\n    )\n  }\n\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}